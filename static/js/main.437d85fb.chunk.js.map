{"version":3,"sources":["redux/calcSlice.ts","components/ToggleSwitch.tsx","components/Form.tsx","components/Card.tsx","components/Button.tsx","components/Container.tsx","redux/store.ts","App.tsx","index.tsx"],"names":["initialState","modeToggledOn","totalAmount","monthlyDeposit","goalReachDate","Date","now","toLocaleString","monthlyAmount","savings","monthsCount","calcSlice","createSlice","name","reducers","switchToggle","state","setMonthlyDeposit","action","payload","setTotalAmount","setGoalReachDate","calculate","currentDate","parse","getFullYear","getMonth","actions","ToggleSwitch","toggledOn","useSelector","calc","dispatch","useDispatch","StyledToggleSwitch","onClick","styled","div","Form","DateInput","forwardRef","ref","value","onChange","id","StyledInput","StyledForm","htmlFor","Field","InputButton","type","toString","e","Number","target","date","setMonth","dateFormat","showMonthYearPicker","minDate","selected","customInput","input","Card","getDateMonthYear","month","StyledCard","Row","Label","MonthlyAmount","isNaN","isFinite","toFixed","Description","Button","StyledButton","button","Container","StyledContainer","style","display","store","configureStore","reducer","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.437d85fb.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { CalcState } from \"../types/types\";\r\n\r\nconst initialState: CalcState = {\r\n  modeToggledOn: true,\r\n  totalAmount: 0,\r\n  monthlyDeposit: 0,\r\n  goalReachDate: new Date(Date.now()).toLocaleString(),\r\n  monthlyAmount: 0,\r\n  savings: 0,\r\n  monthsCount: 0\r\n}\r\n\r\nconst calcSlice = createSlice({\r\n  name: \"calc\",\r\n  initialState,\r\n  reducers: {\r\n    switchToggle: (state) => {\r\n      return {...state, modeToggledOn: !state.modeToggledOn}\r\n    },\r\n    setMonthlyDeposit: (state, action: PayloadAction<number>) => {\r\n      return {...state, monthlyDeposit: action.payload}\r\n    },\r\n    setTotalAmount: (state, action: PayloadAction<number>) => {\r\n      return {...state, totalAmount: action.payload}\r\n    },\r\n    setGoalReachDate: (state, action: PayloadAction<string>) => {\r\n      return {...state, goalReachDate: action.payload}\r\n    },\r\n    calculate: (state) => {\r\n      const currentDate = new Date(Date.now());\r\n      const goalReachDate = new Date(Date.parse(state.goalReachDate));\r\n      var monthsCount = (goalReachDate.getFullYear() - currentDate.getFullYear()) * 12;  \r\n        monthsCount -= currentDate.getMonth();\r\n        monthsCount += goalReachDate.getMonth();\r\n\r\n      return {...state, savings: (state.monthlyDeposit * monthsCount), monthlyAmount: (state.totalAmount / monthsCount), monthsCount: monthsCount}\r\n    }\r\n  }\r\n})\r\n\r\nexport const { switchToggle, setTotalAmount, setMonthlyDeposit, setGoalReachDate, calculate } = calcSlice.actions;\r\n\r\nexport default calcSlice.reducer;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { AppDispatch, RootState } from \"../redux/store\";\r\nimport { switchToggle } from \"../redux/calcSlice\";\r\nimport { StyledToggleSwitchProps } from \"../types/types\";\r\n\r\nexport default function ToggleSwitch() {\r\n  const toggledOn = useSelector((state: RootState) => state.calc.modeToggledOn);\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  return (\r\n    <StyledToggleSwitch\r\n      data-testid=\"toggle-switch\"\r\n      toggledOn={toggledOn}\r\n      onClick={() => dispatch(switchToggle())}\r\n    >\r\n      <div></div>\r\n    </StyledToggleSwitch>\r\n  );\r\n}\r\n\r\nconst StyledToggleSwitch = styled.div<StyledToggleSwitchProps>`\r\n  width: 38px;\r\n  height: 18px;\r\n  padding: 1px;\r\n  padding-left: ${({ toggledOn }) => (toggledOn ? \"21px\" : \"1px\")};\r\n  background: \"#FFFFFF\";\r\n  border: 1px solid #cfcfcf;\r\n  border-radius: 9px;\r\n  cursor: pointer;\r\n  transition: 0.3s ease-in-out;\r\n\r\n  div {\r\n    width: 14px;\r\n    height: 14px;\r\n    background: ${({ toggledOn }) => (toggledOn ? \"#2f80ed\" : \"#cfcfcf;\")};\r\n    border-radius: 100%;\r\n  }\r\n\r\n  span {\r\n    font-size: 14px;\r\n    line-height: 17px;\r\n    color: #102c51;\r\n  }\r\n`;\r\n","import { forwardRef, ChangeEvent } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"../redux/store\";\r\nimport {\r\n  setTotalAmount,\r\n  setGoalReachDate,\r\n  setMonthlyDeposit,\r\n  calculate,\r\n} from \"../redux/calcSlice\";\r\n\r\nexport default function Form() {\r\n  const totalAmount = useSelector((state: RootState) => state.calc.totalAmount);\r\n  const monthlyDeposit = useSelector(\r\n    (state: RootState) => state.calc.monthlyDeposit\r\n  );\r\n  const modeToggledOn = useSelector(\r\n    (state: RootState) => state.calc.modeToggledOn\r\n  );\r\n  const goalReachDate = useSelector(\r\n    (state: RootState) => state.calc.goalReachDate\r\n  );\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  // Custom date input for the react datepicker\r\n  const DateInput = forwardRef<\r\n    HTMLInputElement,\r\n    React.DetailedHTMLProps<\r\n      React.InputHTMLAttributes<HTMLInputElement>,\r\n      HTMLInputElement\r\n    >\r\n  >(({ value, onClick, onChange, id }, ref) => (\r\n    <StyledInput\r\n      data-testid=\"date-input\"\r\n      id={id}\r\n      ref={ref}\r\n      onClick={onClick}\r\n      onChange={onChange}\r\n      value={value}\r\n    />\r\n  ));\r\n\r\n  const addToDate = () => {\r\n    let date = new Date(Date.parse(goalReachDate));\r\n    dispatch(\r\n      setGoalReachDate(\r\n        new Date(date.setMonth(date.getMonth() + 1)).toLocaleString()\r\n      )\r\n    );\r\n    dispatch(calculate());\r\n  };\r\n\r\n  const subtractFromDate = () => {\r\n    let date = new Date(Date.parse(goalReachDate));\r\n\r\n    if (date < new Date(Date.now())) return;\r\n\r\n    dispatch(\r\n      setGoalReachDate(\r\n        new Date(date.setMonth(date.getMonth() - 1)).toLocaleString()\r\n      )\r\n    );\r\n    dispatch(calculate());\r\n  };\r\n\r\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    modeToggledOn\r\n      ? dispatch(setTotalAmount(Number(e.target.value)))\r\n      : dispatch(setMonthlyDeposit(Number(e.target.value)));\r\n\r\n    dispatch(calculate());\r\n  };\r\n\r\n  const onDateChange = (date: Date) => {\r\n    dispatch(setGoalReachDate(date.toLocaleString()));\r\n    dispatch(calculate());\r\n  };\r\n\r\n  return (\r\n    <StyledForm>\r\n      <label htmlFor=\"amount\">\r\n        {modeToggledOn ? \"Total amount\" : \"Monthly deposit\"}\r\n      </label>\r\n      <Field>\r\n        <InputButton>$</InputButton>\r\n        <StyledInput\r\n          data-testid=\"amount-input\"\r\n          id=\"amount\"\r\n          type=\"number\"\r\n          value={\r\n            modeToggledOn ? totalAmount.toString() : monthlyDeposit.toString()\r\n          }\r\n          onChange={onInputChange}\r\n        />\r\n      </Field>\r\n      <label htmlFor=\"goal-reach-date\">Reach goal by</label>\r\n      <Field>\r\n        <InputButton onClick={subtractFromDate}>&lt;</InputButton>\r\n        <DatePicker\r\n          id=\"goal-reach-date\"\r\n          dateFormat=\"MMMM yyyy\"\r\n          showMonthYearPicker\r\n          minDate={new Date(Date.now())}\r\n          selected={new Date(Date.parse(goalReachDate))}\r\n          onChange={onDateChange}\r\n          customInput={<DateInput />}\r\n        />\r\n        <InputButton onClick={addToDate}>&gt;</InputButton>\r\n      </Field>\r\n    </StyledForm>\r\n  );\r\n}\r\n\r\nconst StyledForm = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px 0;\r\n\r\n  label {\r\n    font-size: 14px;\r\n    line-height: 17px;\r\n    color: #102c51;\r\n  }\r\n`;\r\n\r\nconst Field = styled.div`\r\n  display: flex;\r\n  width: 308px;\r\n  height: 42px;\r\n  margin-bottom: 15px;\r\n  border: 1px solid #cfcfcf;\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst InputButton = styled.div`\r\n  width: 42px;\r\n  height: 40px;\r\n  display: grid;\r\n  place-content: center;\r\n  background: #f4f8fa;\r\n  border-radius: 4px 0px 0px 4px;\r\n  color: #828282;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  height: 100%;\r\n  text-align: center;\r\n  outline: none;\r\n  border: none;\r\n  font-size: 18px;\r\n  line-height: 22px;\r\n  color: #000000;\r\n  background: none;\r\n`;\r\n","import { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { RootState } from \"../redux/store\";\r\n\r\nexport default function Card() {\r\n  const modeToggledOn = useSelector(\r\n    (state: RootState) => state.calc.modeToggledOn\r\n  );\r\n  const savings = useSelector((state: RootState) => state.calc.savings);\r\n  const monthlyAmount = useSelector(\r\n    (state: RootState) => state.calc.monthlyAmount\r\n  );\r\n  const goalReachDate = useSelector(\r\n    (state: RootState) => state.calc.goalReachDate\r\n  );\r\n  const totalAmount = useSelector((state: RootState) => state.calc.totalAmount);\r\n  const monthsCount = useSelector((state: RootState) => state.calc.monthsCount);\r\n\r\n  const getDateMonthYear = () => {\r\n    let date = new Date(Date.parse(goalReachDate));\r\n    return (\r\n      date.toLocaleString(\"default\", { month: \"long\" }) +\r\n      \" \" +\r\n      date.getFullYear()\r\n    );\r\n  };\r\n\r\n  return modeToggledOn ? (\r\n    <StyledCard>\r\n      <Row>\r\n        <Label>Monthly Amount</Label>\r\n        <MonthlyAmount data-testid=\"result\">\r\n          $\r\n          {isNaN(monthlyAmount) || !isFinite(monthlyAmount)\r\n            ? 0.0\r\n            : monthlyAmount.toFixed(2)}\r\n        </MonthlyAmount>\r\n      </Row>\r\n      <Description>\r\n        You are planning {monthsCount} monthly deposits to reach your $\r\n        {totalAmount} goal by {getDateMonthYear()}\r\n      </Description>\r\n    </StyledCard>\r\n  ) : (\r\n    <StyledCard>\r\n      <Row>\r\n        <Label>Savings</Label>\r\n        <MonthlyAmount data-testid=\"result\">\r\n          ${isNaN(savings) || !isFinite(savings) ? 0.0 : savings.toFixed(2)}\r\n        </MonthlyAmount>\r\n      </Row>\r\n      <Description>\r\n        You are saving <strong>${savings.toFixed(2)}</strong> by{\" \"}\r\n        <strong>{getDateMonthYear()}</strong>\r\n      </Description>\r\n    </StyledCard>\r\n  );\r\n}\r\n\r\nconst StyledCard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 308px;\r\n  height: 145px;\r\n  border: 1px solid #cfcfcf;\r\n  box-sizing: border-box;\r\n  filter: drop-shadow(0px 1px 10px rgba(0, 0, 0, 0.03));\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  height: 100%;\r\n`;\r\n\r\nconst Label = styled.div`\r\n  font-size: 14px;\r\n  line-height: 17px;\r\n  color: #102c51;\r\n`;\r\n\r\nconst MonthlyAmount = styled.div`\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  line-height: 29px;\r\n  color: #2f80ed;\r\n`;\r\n\r\nconst Description = styled.div`\r\n  width: 306px;\r\n  height: 47px;\r\n  padding: 10px 25px;\r\n  background: #f4f8fa;\r\n  border-radius: 0px 0px 4px 4px;\r\n  font-size: 10px;\r\n  font-weight: bold;\r\n  line-height: 14px;\r\n  color: #102c51;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport default function Button() {\r\n  return <StyledButton>Finish</StyledButton>;\r\n}\r\n\r\nconst StyledButton = styled.button`\r\n  display: grid;\r\n  place-content: center;\r\n  width: 308px;\r\n  height: 42px;\r\n  margin-top: 24px;\r\n  background: #2f80ed;\r\n  border: none;\r\n  border-radius: 10px;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  line-height: 22px;\r\n  color: #f2f2f2;\r\n  outline: none;\r\n  cursor: pointer;\r\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\r\n\r\n  &:hover {\r\n    background: #3d8ef7;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nimport ToggleSwitch from \"./ToggleSwitch\";\r\nimport Form from \"./Form\";\r\nimport Card from \"./Card\";\r\nimport Button from \"./Button\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nexport default function Container() {\r\n  const modeToggledOn = useSelector(\r\n    (state: RootState) => state.calc.modeToggledOn\r\n  );\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <h1>\r\n        Savings <br /> calculator\r\n      </h1>\r\n      <div style={{ display: \"flex\" }}>\r\n        <ToggleSwitch />\r\n        <span>\r\n          {modeToggledOn\r\n            ? \"Calculate by total amount\"\r\n            : \"Calculate by monthly deposit\"}\r\n        </span>\r\n      </div>\r\n      <Form />\r\n      <Card />\r\n      <Button />\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n  width: 400px;\r\n  height: 606px;\r\n  padding: 36px 45px;\r\n  background: #fffefe;\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1), 0px 0px 20px rgba(0, 0, 0, 0.1);\r\n  border-radius: 6px;\r\n\r\n  h1 {\r\n    font-size: 30px;\r\n    font-weight: normal;\r\n    line-height: 37px;\r\n  }\r\n\r\n  span {\r\n    margin-left: 5px;\r\n    font-size: 14px;\r\n    line-height: 17px;\r\n    color: #102c51;\r\n  }\r\n`;\r\n","import { configureStore, EnhancedStore } from \"@reduxjs/toolkit\";\r\nimport calcSlice from \"./calcSlice\";\r\n\r\nconst store: EnhancedStore = configureStore({\r\n  reducer: {\r\n    calc: calcSlice\r\n  }\r\n})\r\n\r\nexport default store;\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import { Provider } from \"react-redux\";\nimport Container from \"./components/Container\";\nimport store from \"./redux/store\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <div className=\"header\">Let's plan your saving goal</div>\n        <Container />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}